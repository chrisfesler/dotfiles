# Base PATH setup
export PATH="$HOME/bin:$HOME/.local/bin:$PATH"

if [[ "$(uname)" == "Darwin" ]]; then
  export PATH="/opt/homebrew/bin:/opt/homebrew/opt/ruby/bin:$PATH"
elif [[ "$(uname)" == "Linux" ]]; then
  # ToDo
  :
fi

# PNPM
export PNPM_HOME="$HOME/Library/pnpm"
[[ ":$PATH:" != *":$PNPM_HOME:"* ]] && export PATH="$PNPM_HOME:$PATH"

# libpq (e.g. Postgres)
export PATH="$PATH:/opt/homebrew/opt/libpq/bin"

# Pyenv
export PYENV_ROOT="$HOME/.pyenv"
if command -v pyenv >/dev/null; then
  [[ ":$PATH:" != *":$PYENV_ROOT/bin:"* ]] && export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi

# Oh My Zsh setup
export ZSH="$HOME/.oh-my-zsh"
if [[ -f "$ZSH/oh-my-zsh.sh" ]]; then
  COMPLETION_WAITING_DOTS="true"

  plugins=(
    bazel
    gcloud
    git
    terraform
    you-should-use
    z
    zsh-autosuggestions
    zsh-eza
    zsh-syntax-highlighting
  )


  source "$ZSH/oh-my-zsh.sh"
  fpath+=("${ZSH_CUSTOM:-${ZSH:-$HOME/.oh-my-zsh}/custom}/plugins/zsh-completions/src")
else
  echo "Warning: oh-my-zsh not found at $ZSH" >&2
fi

# Shell behavior
set -o vi
bindkey -M vicmd v edit-command-line

# User config
[[ -f "$HOME/.zshenv" ]] && source "$HOME/.zshenv"

# Aliases and tools
export oak="$HOME/src/nuts/oak"
alias oak='cd "$oak"'

if alias llm &>/dev/null; then
  unalias llm
fi

if command -v nvim >/dev/null; then
  export EDITOR=nvim
  alias vim='nvim'
  alias vi='nvim'
elif command -v vim >/dev/null; then
  export EDITOR=vim
  alias vi='vim'
fi

if command -v bat >/dev/null; then
  export MANPAGER="sh -c 'col -bx | bat -l man -p'"
  alias cat='bat'
  alias pcat='bat --plain'
fi

if command -v chezmoi >/dev/null; then
  alias cm='chezmoi'
  alias cme='chezmoi edit'
  alias cmez="chezmoi edit ${HOME}/.zshrc"
  alias cmcd='cd "$(chezmoi source-path)"'
fi

alias ds="$oak/tools/localdev/docker_stop.sh"
alias de="$oak/tools/localdev/docker_ensure.sh"

command -v bc >/dev/null && alias '?'='bc -le'

# Git aliases
alias g=git
alias ga='git add'
alias gaa='git add --all'
alias gb='git branch'
alias gbd='git branch --delete'
alias gc='git commit --verbose'
alias 'gc!'='git commit --verbose --amend'
alias gcb='git checkout -b'
alias gcf='git config --list'
alias gclean='git clean --interactive -d'
alias gcm='git checkout $(git_main_branch)'
alias gcmsg='git commit --message'
alias gco='git checkout'
alias gd='git diff --word-diff'
alias gdc='git diff --cached --word-diff'
alias gds='git diff --staged --word-diff'
alias glgga='git log --graph --decorate --all'
alias glgm='git log --graph --max-count=10'
alias glgp='git log --stat --patch'
alias glo='git log --oneline --decorate'
alias glod='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset"'
alias glods='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset" --date=short'
alias glog="g lg"
alias gloga='git log --oneline --decorate --graph --all'
alias glol='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset"'
alias glola='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --all'
alias glols='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --stat'
alias glp=_git_log_prettily
alias gp='git push'
alias gpd='git push --dry-run'
alias 'gpf!'='git push --force-with-lease'
alias grb='git rebase'
alias grba='git rebase --abort'
alias grbc='git rebase --continue'
alias grbi='git rebase --interactive'
alias gs='git switch'
alias gss='git status --short'
alias gst='git status'
alias gsta='git stash push'
alias gstaa='git stash apply'
alias gstall='git stash --all'
alias gstc='git stash clear'
alias gstd='git stash drop'
alias gstl='git stash list'
alias gstp='git stash pop'
alias gsts='git stash show --patch'
alias gunwip='git rev-list --max-count=1 --format="%s" HEAD | grep -q "\--wip--" && git reset HEAD~1'
alias gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign --message "--wip-- [skip ci]"'

# SDKMAN
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "${SDKMAN_DIR}/bin/sdkman-init.sh" ]] && source "${SDKMAN_DIR}/bin/sdkman-init.sh"

# GCloud
[[ -f "$HOME/apps/google-cloud-sdk/path.zsh.inc" ]] && source "$HOME/apps/google-cloud-sdk/path.zsh.inc"
[[ -f "$HOME/apps/google-cloud-sdk/completion.zsh.inc" ]] && source "$HOME/apps/google-cloud-sdk/completion.zsh.inc"

# opam
[[ -r "$HOME/.opam/opam-init/init.zsh" ]] && source "$HOME/.opam/opam-init/init.zsh" >/dev/null 2>/dev/null

# fnm
command -v fnm >/dev/null && eval "$(fnm env --use-on-cd)"

# asdf
if command -v asdf >/dev/null; then
  export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"
  fpath=(${ASDF_DATA_DIR:-$HOME/.asdf}/completions $fpath)
  autoload -Uz compinit && compinit
  . ~/.asdf/plugins/java/set-java-home.zsh
fi

# Shell-GPT integration
if command -v sgpt >/dev/null; then
  _sgpt_zsh() {
    if [[ -n "$BUFFER" ]]; then
      _sgpt_prev_cmd=$BUFFER
      BUFFER+="âŒ›"
      zle -I && zle redisplay
      BUFFER=$(sgpt --shell <<< "$_sgpt_prev_cmd" --no-interaction)
      zle end-of-line
    fi
  }
  zle -N _sgpt_zsh
  bindkey ^g _sgpt_zsh
fi

# starship
if command -v starship >/dev/null; then
  type starship_zle-keymap-select >/dev/null || eval "$(starship init zsh)"
fi

# atuin
command -v atuin >/dev/null && eval "$(atuin init zsh --disable-up-arrow)"

# API keys
if [[ -d "$HOME/secrets" ]]; then
  for f in "$HOME"/secrets/*.sh; do
    [[ -f $f ]] && source "$f"
  done
fi
